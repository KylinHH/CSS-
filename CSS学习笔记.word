CSS全称为“层叠样式表 (Cascading Style Sheets)

css 样式由选择符和声明组成，而声明又由属性和值组成


在CSS中也有注释语句：用/*注释语句*/


从CSS 样式代码插入的形式来看基本可以分为：内联式、嵌入式和外部式三种
优先级：内联式>嵌入式>外部式。
总结来说，就是就近原则(离被设置元素越近优先级别越高)

内联式：把CSS代码直接写在现有的html标签中。
<p style = “color :red ; font-size:12px”> 这里字为红色，大小为12px </p>

嵌入式：可以把css样式代码写在<style type="text/css"></style>标签之间，一般情况下嵌入式css样式写在<head></head>之间
<style type="text/css">
span{
color:red;
}
</style>

外部式：把css代码写一个单独的外部文件中，这个css样式文件以“.css”为扩展名，在<head>内（不是在<style>标签内）使用<link>标签将css样式文件链接到HTML文件内。
<link href="base.css" rel="stylesheet" type="text/css"(固定写法不可变) />


选择器：
 
标签选择器：标签选择器其实就是html代码中的标签。如<html><body><p>

类选择器：  .类选器名称{css样式代码;}


ID选择器：ID选择器都类似于类选择符，但也有一些重要的区别：
1、为标签设置id="ID名称"，而不是class="类名称"。
2、ID选择符的前面是井号（#）号，而不是英文圆点（.）。

1.ID选择器只能在文档中使用一次。与类选择器不同，在一个HTML文档中，ID选择器只能使用一次，而且仅一次。而类选择器可以使用多次。
2.可以使用类选择器词列表方法为一个元素同时设置多个样式。我们可以为一个元素同时设多个样式，但只可以用类选择器的方法实现，ID选择器是不可以的（不能使用 ID 词列表）。
.stress{
    color:red;
}
.bigsize{
    font-size:25px;
}
<p>到了<span class="stress bigsize">三年级</span>下学期时，我们班上了一节公开课...</p>

子选择器：大于符号(>),用于选择指定标签元素的第一代子元素
H1>h2{} 则所有h1下，最外层的h2有样式，如有嵌套的情况，第二三四五层h2均没有



包含（后代）选择器：即加入空格,用于选择指定标签元素下的后辈元素。
请注意：这个选择器与子选择器的区别，子选择器（child selector）仅是指它的直接后代，或者你可以理解为作用于子元素的第一代后代。而后代选择器是作用于所有子后代元素。后代选择器通过空格来进行选择，而子选择器是通过“>”进行选择。

通用选择器：通用选择器是功能最强大的选择器，它使用一个（*）号指定，它的作用是匹配html中所有标签元素

伪类选择器：为什么叫做伪类选择符，它允许给html不存在的标签（标签的某种状态）设置样式，比如说我们给html中一个标签元素的鼠标滑过的状态来设置字体颜色：
a:hover{color:red;}
上面一行代码就是为 a 标签鼠标滑过的状态设置字体颜色变红。这样就会使第一段文字内容中的“胆小如鼠”文字加入鼠标滑过字体颜色变为红色特效。
a:link {color: #FF0000}		/* 未访问的链接 */
a:visited {color: #00FF00}		/* 已访问的链接 */
a:hover {color: #FF00FF}		/* 鼠标移动到链接上 */
a:active {color: #0000FF}		/* 选定的链接 */

分组选择符：当你想为html中多个标签元素设置同一个样式时，可以使用分组选择符（，）
h1,span{color:red;}

选择器的优先级：行内样式>id选择器>类选择器>元素选择器>后代选择器>


继承：
CSS的某些样式是具有继承性的，那么什么是继承呢？继承是一种规则，它允许样式不仅应用于某个特定html标签元素，而且应用于其后代。
但注意有一些css样式是不具有继承性的。如border:1px solid red;

特殊性：
标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100。例如下面的代码：
p{color:red;} /*权值为1*/
p span{color:green;} /*权值为1+1=2*/
.warning{color:white;} /*权值为10*/
p span.warning{color:purple;} /*权值为1+1+10=12*/
#footer .note p{color:yellow;} /*权值为100+10+1=111*/
注意：还有一个权值比较特殊--继承也有权值但很低，有的文献提出它只有0.1，所以可以理解为继承的权值最低。

重要性：使用	!Important	为某些样式设置最高优先级
注意：!important要写在分号之前。
这里注意！当网页制作者不设置css样式时，浏览器会按照自己的一套样式来显示网页。并且用户也可以在浏览器中设置自己习惯的样式，比如有的用户习惯把字号设置为大一些，使其查看网页的文本更加清楚。这时注意样式优先级为：浏览器默认的样式 < 网页制作者样式 < 用户自己设置的样式，但记住!important优先级样式是个例外，权值高于用户自己设置的样式。

文字排版：

字体：font-family
注：用户是否可以看到你设置的字体样式取决于用户本地电脑上是否安装你设置的字体。
字号：font-size
字体样式：
font-weight：bold;			 /*粗体*/
font-style:italic ;			 /*斜体*/
text-decoration:underline;		 /*下划线*/
text-decoration:line-through		 /*删除线*/

段落排版：
text-indent:2em;		    /*首行缩进，2em意思是文字的两倍大小*/
line-height:2em;		    /*行间距*/
letter-spacing:50px;		    /*文字间隔或者字母间隔*/
word-spacing:50px;		    /*英文单词间距*/
text-align:center/left/right    /*设置段落位置居中/靠左/靠右*/


在CSS中，html中的标签元素大体被分为三种不同的类型：块状元素、内联元素(又叫行内元素)和内联块状元素。
常用的块状元素有：
<div>、<p>、<h1>...<h6>、<ol>、<ul>、<dl>、<table>、<address>、<blockquote> 、<form>
常用的内联元素有：
<a>、<span>、<br>、<i>、<em>、<strong>、<label>、<q>、<var>、<cite>、<code>
常用的内联块状元素有：
<img>、<input>

块级元素：
<div>、<p>、<h1>...<h6>、<ol>、<ul>、<dl>、<table>、<address>、<blockquote> 、<form>
设置display:block就是将元素显示为块级元素。
特点：
1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（一个块级元素占一行）
2、元素的高度、宽度、行高以及顶和底边距都可设置。
3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。
内联元素：
当然块状元素也可以通过代码display:inline将元素设置为内联元素
特点：
1、和其他元素都在一行上；
2、元素的高度、宽度及顶部和底部边距不可设置；
3、元素的宽度就是它包含的文字或图片的宽度，不可改变。

内联块状元素：
代码display:inline-block就是将元素设置为内联块状元素。
特点：
1、和其他元素都在一行上；
2、元素的高度、宽度、行高以及顶和底边距都可设置。


盒模型：
1、border-style（边框样式）常见样式有：
dashed（虚线）| dotted（点线）| solid（实线）。

2、border-color（边框颜色）中的颜色可设置为十六进制颜色，如:
border-color:#888;//前面的井号不要忘掉。

3、border-width（边框宽度）中的宽度也可以设置为：
thin | medium | thick（但不是很常用），最常还是用象素（px）。
如下面代码为 div 来设置边框粗细为 2px、样式为实心的、颜色为红色的边框：
div{    border:2px  solid  red;}
上面是 border 代码的缩写形式，可以分开写：
div{    
border-width:2px;
    border-style:solid;
    border-color:red;	}

为 p 标签单独设置下边框，而其它三边都不设置边框样式怎么办呢
css 样式中允许只为一个方向的边框设置样式：
div{border-bottom:1px solid red;}
同样可以使用下面代码实现其它三边(上、右、左)边框的设置：
border-top:1px solid red;
border-right:1px solid red; 
border-left:1px solid red;




宽度和高度：css内定义的宽（width）和高（height），指的是填充以里的内容范围


填充：padding
元素内容与边框之间是可以设置距离的，称之为“填充”。
填充也可分为上、右、下、左(顺时针)。
div{padding:20px 10px 15px 30px;}
顺序一定不要搞混。可以分开写上面代码：
div{
   padding-top:20px;
   padding-right:10px;
   padding-bottom:15px;
   padding-left:30px;
}

边界：margin
元素与其它元素之间的距离可以使用边界（margin）来设置。边界也是可分为上、右、下、左。
总结一下：padding和margin的区别，padding在边框里，margin在边框外。


CSS包含3种基本的布局模型，用英文概括为：Flow、Layer 和 Float。
在网页中，元素有三种布局模型：
1、流动模型（Flow）
2、浮动模型 (Float)
3、层模型（Layer）


流动模型：是网页默认的布局模式
特征：
块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，因为在默认状态下，块状元素的宽度都为100%。实际上，块状元素都会以行的形式占据位置。
在流动模型下，内联元素都会在所处的包含元素内从左到右水平分布显示。

浮动模型：任何元素在默认情况下是不能浮动的，但可以用 CSS 定义为浮动，如 div、p、table、img 等元素都可以被定义为浮动。使得两个块状元素并排显示。

div{
    width:200px;
    height:200px;
    border:2px red solid;
    float:left;
}
也可以同时设置两个元素右浮动也可以实现一行显示。
div{
    width:200px;
    height:200px;
    border:2px red solid;
    float:right;
}
设置两个元素一左一右一行显示
div{
    width:200px;
    height:200px;
    border:2px red solid;
}
#div1{float:left;}
#div2{float:right;}


层模型：为了让html元素在网页中精确定位，就像图像软件PhotoShop中的图层一样可以对每个图层能够精确定位操作。CSS定义了一组定位（positioning）属性来支持层布局模型。
层模型有三种形式：
1.绝对定位(position: absolute)
2.相对定位(position: relative)
3.固定定位(position: fixed)

绝对定位：设置position:absolute(表示绝对定位)，这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。
如下面代码可以实现div元素相对于浏览器窗口向右移动100px，向下移动50px。
div{
    width:200px;
    height:200px;
    border:2px red solid;
    position:absolute;
    left:100px;
    top:50px;
}
<div id="div1"></div>


相对定位：设置position:relative（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。


固定定位：fixed：表示固定定位，与absolute定位类型类似，但它的相对移动的坐标是视图（屏幕内的网页窗口）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，这与background-attachment:fixed;属性功能相同。以下代码可以实现相对于浏览器视图向右移动100px，向下移动50px。并且拖动滚动条时位置固定不变。

relative 和 absolute 组合使用：
必须遵守下面规范：
1、参照定位的元素必须是相对定位元素的前辈元素：
<div id="box1"><!--参照定位的元素-->
    <div id="box2">相对参照元素进行定位</div><!--相对定位元素-->
</div>
（相对定位元素需嵌套在参照定位元素内）
2、参照定位的元素必须加入position:relative;
#box1{
    width:200px;
    height:200px;
    position:relative;        
}
3、定位元素加入position:absolute，便可以使用top、bottom、left、right来进行偏移定位了。
#box2{
    position:absolute;
    top:20px;
    left:30px;         
}
这样box2就可以相对于父元素box1定位了（这里注意参照物就可以不是浏览器了，而可以自由设置了）。
CSS代码缩写：
字体缩写：
注意：
1、使用这一简写方式你至少要指定 font-size 和 font-family 属性，其他的属性(如 font-weight、font-style、font-variant、line-height)如未指定将自动使用默认值。
2、在缩写时 font-size 与 line-height 中间要加入“/”斜扛。
body{
    font-style:italic;
    font-variant:small-caps; 
    font-weight:bold; 
    font-size:12px; 
    line-height:1.5em; 
    font-family:"宋体",sans-serif;
}
这么多行的代码其实可以缩写为一句：
body{
    font:italic  small-caps  bold  12px/1.5em  "宋体",sans-serif;
}

长度值：长度单位总结一下，目前比较常用到px（像素）、em、% 百分比，要注意其实这三种单位都是相对单位。
1、像素
像素为什么是相对单位呢？因为像素指的是显示器上的小点（CSS规范中假设“90像素=1英寸”）。实际情况是浏览器会使用显示器的实际像素值有关，在目前大多数的设计者都倾向于使用像素（px）作为单位。
2、em
就是本元素给定字体的 font-size 值，如果元素的 font-size 为 14px ，那么 1em = 14px；如果 font-size 为 18px，那么 1em = 18px。
注意：当给 font-size 设置单位为 em 时，此时计算的标准以 p 的父元素的 font-size 为基础。
3、百分比
p{font-size:12px;line-height:130%}
设置行高（行间距）为字体的130%（12 * 1.3 = 15.6px）。


CSS样式设置小技巧：
行内元素怎么进行水平居中：如果被设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置 text-align:center 来实现的。(父元素和子元素：如下面的html代码中，div是“我想要在父容器中水平居中显示”这个文本的父元素。反之这个文本是div的子元素 )

定宽块状元素。(定宽块状元素：块状元素的宽度width为固定值。)怎么进行水平居中：
满足定宽和块状两个条件的元素是可以通过设置“左右margin”值为“auto”来实现居中的。
<style>
div{
    border:1px solid red;/*为了显示居中效果明显为 div 设置了边框*/
    width:200px;/*定宽*/
    margin:20px auto;/* margin-left 与 margin-right 设置为 auto */
}

“不定宽度的块状元素”设置居中：
三种方法居中（这三种方法目前使用的都很多）：
加入 table 标签
改变块级元素的 display 为 inline 类型（设置为 行内元素 显示），然后使用 text-align:center 来实现居中效果。
<style>
.container{
    text-align:center;
}/* margin:0;padding:0（消除文本与div边框之间的间隙）*/
.container ul{
    list-style:none;
    margin:0;
    padding:0;
    display:inline;
}/* margin-right:8px（设置li文本之间的间隔）*/
.container li{
    margin-right:8px;
    display:inline;
}
</style>

通过给父元素设置 float，然后给父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。
<style>
.container{
    float:left;
    position:relative;
    left:50%
}

.container ul{
    list-style:none;
    margin:0;
    padding:0;
    position:relative;
    left:-50%;
}
.container li{float:left;display:inline;margin-right:8px;}
</style>

垂直居中：
父元素高度确定的单行文本：
通过设置父元素的 height 和 line-height 高度一致来实现的。(height: 该元素的高度，line-height: 顾名思义，行高（行间距），指在文本中，行与行之间的 基线间的距离 )。line-height 与 font-size 的计算值之差，在 CSS 中成为“行间距”。分为两半，分别加到一个文本行内容的顶部和底部。
<style>
.container{
    height:100px;
    line-height:100px;
    background:#999;
}
</style>

父元素高度确定的多行文本。
使用插入 table  (包括tbody、tr、td)标签，同时设置 vertical-align：middle。
css 中有一个用于竖直居中的属性 vertical-align，在父元素设置此样式时，会对inline-bl	ock类型的子元素都有用。
在 chrome、firefox 及 IE8 以上的浏览器下可以设置块级元素的 display 为 table-cell（设置为表格单元显示），激活 vertical-align 属性，但注意 IE6、7并不支持这个样式, 兼容性比较差。
<style>
.container{
    height:300px;
background:#ccc;    
display:table-cell;/*IE8以上及Chrome、Firefox*/
    vertical-align:middle;/*IE8以上及Chrome、Firefox*/}
</style>
